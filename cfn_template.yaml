AWSTemplateFormatVersion: 2010-09-09

Description:  Template

Parameters:
  ImageId:
    Description: AMI image. By default Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type in eu-central-1
    Type: AWS::EC2::Image::Id
    Default: ami-0bd99ef9eccfee250
    ConstraintDescription: must be a valid AMI type.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues: 
     - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  AdminMail :
    Type: String
    Description: Administrator email for notifications
    # AllowedPattern: /[^\s@]+@[^\s@]+\.[^\s@]+/
    ConstraintDescription: You should enter a valid email

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  VPCSubnet001EC2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-001-ec2
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy: 
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          setup:
            - clean_logrotate
            - update_logrotate
        clean_logrotate:
          commands:
            delete_logrotate_conf:
              command: rm /etc/logrotate.conf 2> /dev/null
            delete_syslog_logrotate:
              command: rm /etc/logrotate.d/syslog 2> /dev/null
        update_logrotate:
          commands:
            update_logrotate_cron:
              command: mv /etc/cron.daily/logrotate /etc/cron.hourly/logrotate
          files:
            "/etc/logrotate.conf":
              content: |
                rotate 4
                create
                dateext
                include /etc/logrotate.d
                /var/log/wtmp {
                    monthly
                    create 0664 root utmp
                        minsize 1M
                    rotate 1
                }
                /var/log/btmp {
                    missingok
                    monthly
                    create 0600 root utmp
                    rotate 1
                }
            "/etc/logrotate.d/syslog":
              content: !Sub | 
                /var/log/cron
                /var/log/maillog
                /var/log/messages
                /var/log/secure
                /var/log/spooler
                {
                    missingok
                    dateformat _%Y%m%d_%H%M_%s
                    rotate 0
                    size 100k
                    olddir s3Logs
                    createolddir

                    sharedscripts
                    postrotate
                      /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true

                      DATE=`date +"%Y%m%d_%H%M_%s"`
                      ARCHIVE=${AWS::StackName}_ec2_logs_$DATE.tar.gz

                      cd /var/log/
                      tar -czvf $ARCHIVE s3Logs
                      sudo aws s3 cp $ARCHIVE s3://${S3Bucket}/logs/;
                    endscript

                    lastaction
                      sudo rm -fr /var/log/s3Logs || true
                      sudo rm -f ${AWS::StackName}_ec2_logs_*.tar.gz || true
                    endscript
                }
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install -y https://s3.region.amazonaws.com/amazon-ssm-region/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent
            systemctl status amazon-ssm-agent

            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets setup --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: 
                  - !Sub "${S3Bucket.Arn}/*"
          PolicyName: s3PutObjects
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole
      Path: /
  S3BucketPutObjectTopic:
    Type: AWS::SNS::Topic
  S3BucketPutObjectTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics: 
        - !Ref S3BucketPutObjectTopic
      PolicyDocument: 
        Statement:
        - Sid: AllowServices
          Effect: Allow
          Principal:
              Service:
                - ec2.amazonaws.com
          Action: 'sns:Publish'
          # Condition:
          #   ArnLike:
          #     "aws:SourceArn": !Ref EC2InstanceProfile
          Resource:
            - !Ref S3BucketPutObjectTopic
        - Sid: AllowAWS
          Effect: Allow
          Principal:
            AWS: "*"
          Action: 
            - "sns:Publish"
            - "SNS:GetTopicAttributes"
            - "SNS:SetTopicAttributes"
            - "SNS:AddPermission"
            - "SNS:RemovePermission"
            - "SNS:DeleteTopic"
            - "SNS:Subscribe"
            - "SNS:ListSubscriptionsByTopic"
            - "SNS:Publish"
            - "SNS:Receive"
          Resource:
            - !Ref S3BucketPutObjectTopic
  S3BucketPutObjectAdminSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref S3BucketPutObjectTopic
      Endpoint: !Ref AdminMail
      Protocol: email
  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - S3BucketPutObjectTopicPolicy
      - S3BucketPutObjectAdminSubscription
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref S3BucketPutObjectTopic
            Event: 's3:ObjectCreated:*'
  

Outputs:
  InstanceId:
    Description : InstanceId of the newly created EC2 instance,
    Value : !Ref EC2Instance
  PublicIP:
    Description : Public IP address of the newly created EC2 instance,
    Value: !GetAtt EC2Instance.PublicIp
  S3Name:
    Description: Name of the s3 bucket for logs
    Value: !Ref S3Bucket
